{"version":3,"sources":["components/Fullpage.js","components/downIcon.js","sections/Firstsection.js","sections/Aboutsection.js","sections/SkillSection.js","sections/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","className","Component","DownIcon","style","display","alignItems","justifyContent","marginBottom","transform","backgroundColor","src","icon","alt","width","FirstSection","state","color","ChangeColor","setState","onMouseOver","onMouseOut","data","title","subtitle","Object","keys","links","map","key","url","activeClass","to","spy","smooth","offset","duration","onSetActive","handleSetActive","icons","down","name","AboutSection","sections","fontWeight","items","p","content","SkillSection","skill","img","Navigation","cssSelector","switcherColor","darkColor","lightColor","lightTextColor","darkTextColor","marginRight","App","animationInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e22901b3.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport ThemeSwitcher from \"react-theme-switcher\";\r\n\r\nclass Fullpage extends Component {\r\n    render(){\r\n        const {children} = this.props\r\n        return(\r\n            <div className={`full-page ${this.props.className} || '' `}>\r\n                \r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fullpage","import React, { Component } from 'react';\r\n\r\nconst DownIcon=(props) => {\r\n    return(\r\n        <div style={{\r\n            display:\"flex\",\r\n            alignItems:\"center\",\r\n            justifyContent:\"center\",\r\n            marginBottom:\"-35px\",\r\n            transform:\"translateY(-85px)\",\r\n            backgroundColor:\"transparent\"\r\n          }}>\r\n            <img src={props.icon} alt=\"\" style={{\r\n              width:\"30px\"\r\n            }}/>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default DownIcon","import React, { Component } from 'react';\r\nimport Fullpage from \"../components/Fullpage\"\r\nimport data from '../data.json';\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport DownIcon from '../components/downIcon'\r\nimport * as Scroll from 'react-scroll';\r\nimport {Link, Element} from 'react-scroll'\r\n\r\nclass FirstSection extends Component {\r\n\r\n\r\n  state = {\r\n    color: 'white'\r\n  }\r\n  ChangeColor = () => {\r\n    this.setState({\r\n      color: this.state.color === 'white' ? 'black' : 'white'\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Fullpage className=\"first\" >\r\n          <h1 className=\"title\" style={{ color: this.state.color }}\r\n            onMouseOver={() => { this.ChangeColor() }}\r\n            onMouseOut={() => { this.ChangeColor() }}>\r\n            {data.title}\r\n          </h1>\r\n          <div>\r\n            <h2>{data.subtitle}</h2>\r\n          </div>\r\n          <div className=\"icon-container\">\r\n            {\r\n              Object.keys(data.links).map(key => {\r\n                return (\r\n                  <SocialIcon url={data.links[key]} />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n\r\n        </Fullpage>\r\n        <Link activeClass=\"active\" to=\"about\" spy={true} \r\n        smooth={true} offset={50} duration={500} \r\n        onSetActive={this.handleSetActive}>\r\n        <DownIcon icon={data.icons.down}/>\r\n        </Link>\r\n        <Element name=\"about\" className=\"element\"/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FirstSection","import React, { Component } from 'react';\r\nimport Fullpage from \"../components/Fullpage\"\r\nimport data from '../data.json';\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport DownIcon from '../components/downIcon'\r\nimport * as Scroll from 'react-scroll';\r\nimport { Link, Element } from 'react-scroll'\r\n\r\nclass AboutSection extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Fullpage className=\"second\">\r\n                    <h3>\r\n                        {data.sections[0].title}\r\n                    </h3>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        fontWeight:\"bold\"\r\n                    }}>\r\n                        {data.sections[0].items.map(p => {\r\n                            return <p className=\"text-p\">\r\n                                {p.content}\r\n                            </p>\r\n                        }\r\n                        )}\r\n                    </div>\r\n                </Fullpage>\r\n                <Link activeClass=\"active\" to=\"Skills\" spy={true}\r\n                    smooth={true} offset={50} duration={500}\r\n                    onSetActive={this.handleSetActive}>\r\n                    <DownIcon icon={data.icons.down} />\r\n                </Link>\r\n                <Element name=\"Skills\" className=\"element\" />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AboutSection","import React, { Component } from 'react';\r\nimport Fullpage from \"../components/Fullpage\"\r\nimport data from '../data.json';\r\n\r\n\r\nclass SkillSection extends Component {\r\n    render() {\r\n        return (\r\n            <Fullpage className=\"third\">\r\n                <h3>\r\n                    {data.sections[1].title}\r\n                </h3>\r\n                <div className=\"cards-wrapper\">\r\n                    {\r\n                    data.sections[1].items.map(skill => {\r\n                        return (\r\n                            <div className=\"card\">\r\n                                <div className=\"image-wrapper\">\r\n                                    <img src={skill.content.img} />\r\n                                </div>\r\n                                <div className=\"skill-title-wrapper\">\r\n                                    <h4>{skill.content.title}</h4>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                    }\r\n                </div> \r\n                \r\n            </Fullpage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SkillSection\r\n","import React, { Component } from 'react';\r\nimport Fullpage from \"../components/Fullpage\"\r\nimport data from '../data.json';\r\nimport * as Scroll from 'react-scroll';\r\nimport { Link, Element } from 'react-scroll'\r\nimport ThemeSwitcher from \"react-theme-switcher\";\r\n\r\nclass Navigation extends Component {\r\n\r\n  \r\n  \r\n    render() {\r\n        return (\r\n            <div className=\"navigation\">\r\n                <div>\r\n                <ThemeSwitcher\r\n    cssSelector=\"body\"\r\n    switcherColor=\"#ffffff\"\r\n    darkColor=\"#FF5D5D\"\r\n    lightColor=\"#56CAB8\"\r\n    lightTextColor=\"#272b33\"\r\n    darkTextColor=\"#ffffff\"\r\n/>change theme\r\n                 \r\n                </div>\r\n                <div>\r\n                    <Link activeClass=\"active\" to=\"home\" spy={true}\r\n                        smooth={true} offset={50} duration={500}\r\n                        onSetActive={this.handleSetActive}>\r\n                        <span style={{ marginRight: \"15px\" }}>Home</span>\r\n\r\n                    </Link>\r\n                    <Link activeClass=\"active\" to=\"aboutsec\" spy={true}\r\n                        smooth={true} offset={50} duration={500}\r\n                        onSetActive={this.handleSetActive}>\r\n                        <span style={{ marginRight: \"15px\" }}>About</span>\r\n\r\n                    </Link>\r\n                    <Link activeClass=\"active\" to=\"skillsec\" spy={true}\r\n                        smooth={true} offset={50} duration={500}\r\n                        onSetActive={this.handleSetActive}> <span>Skills</span></Link>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation","import React, { Component } from 'react';\n\nimport FirstSection from \"./sections/Firstsection\"\nimport AboutSection from './sections/Aboutsection';\nimport SkillSection from './sections/SkillSection';\nimport Navigation from './sections/Navigation';\nimport * as Scroll from 'react-scroll';\nimport { Link, Element } from 'react-scroll'\nimport SnowStorm from 'react-snowstorm';\n\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       \n        <SnowStorm animationInterval=\"15\" />\n        <Element name=\"home\" className=\"element\" />\n        <Navigation />\n        <FirstSection />\n        <Element name=\"aboutsec\" className=\"element\" />\n        <AboutSection />\n        <Element name=\"skillsec\" className=\"element\" />\n        <SkillSection />\n        \n      </div>\n    )\n\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport Popper from 'popper.js';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}